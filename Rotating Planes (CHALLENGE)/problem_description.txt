**Problem : Rotating Planes (CHALLENGE)**

You have given N 2D planes. Each plane has assigned number betweem 1 to N (both inclusive). Each plane has an order of N*N.
Planes are organised as a stack such that plane with number 1 is on the top of the stack also each valid cell of the 
plane has assigned with some value.

For Ex. kth plane with cell formed by ith row and jth colunm is denoted as STACK[k][i][j].

Your task is to put one more plane defined as STACK[0] on top of the stack with same order N*N.
Such that ith row and jth colunm of STACK[0] plane is STACK[0][i][j] = STACK[1][i][j] + STACK[2][i][j] ... STACK[N][i][j].

But the twist is each plane has assigned some rotation counts (R) in either clockwise (CW) or anticlockwise (ACW) direction.
Here one roation is of 90 degrees.

Note : Rotation count can be different for different planes.
Note : Rotation direction can be different for different planes.
Note : Before calculating values on STACK[0] planes you need to perform rotations to each planes with assigned count and direction.

The direction of the kth plane is depend on the sum of all values of that plane. If sum is even its direction is Clockwise (CW) else
Anticlockwise (ACW). SUM[k] = sigma(for each valid i,j. ( 1 <= i,j <= N ) STACK[k][i][j]).  

Your task is to find the STACK[0] plane. And print N*N matrix that's it. Your score is calculated as the
Actual sum of STACK[0] plane - error in each valid index STACK[0][i][j].

Your task is to maximize this score. Or we can say that minimize the error.

**************************
Constraints: - 
1 <= N <= 100
1 <= R <= 1e18
1 <= STACK[k][i][j] <= 1e9

**************************
Input: -
First line contain a single integer 'N'.
Then next N*N line contains N space separeted integers.
(Each set of N lines from the top is denoted a plane from top to bottom)

**************************
Output: -
N lines contain N space separeted integers.
(Denotes the plane STACK[0] (N*N) )

**************************

Theere are total 5 test files files.

*******

**Test File 1.**
N = 10
1 <= STACK[k][i][j] <= 20
R = 0

*******

**Test File 2.**
N = 100
1 <= STACK[k][i][j] <= 1e9
Rotation count array for each plane. R[1...N]

randomTimes => Random(1,10)
randomTimes its a random integer which will remain same thorughout the test file your task is to crack this randomTimes
variable. This will help to decide the rotation count of each plane.

for (ll i=0; i<=N ;i++){
   for(ll j=0;j<=randomTimes;j++){
   	R[i] = Random(1,1e18);
   }
}

*******

**Test File 3.**
N = 100
1 <= STACK[k][i][j] <= 1e9
Rotation count array for each plane. R[1...N]

randomTimes => Random(1,20)
randomTimes its a random integer which will remain same thorughout the test file your task is to crack this randomTimes
variable. This will help to decide the rotation count of each plane.

for (ll i=0; i<=N ;i++){
   for(ll j=0;j<=randomTimes;j++){
   	R[i] = Random(1,1e18);
   }
}

*******

**Test File 4.**
N = 100
1 <= STACK[k][i][j] <= 1e9
Rotation count array for each plane. R[1...N]

randomTimes => Random(1,30)
randomTimes its a random integer which will remain same thorughout the test file your task is to crack this randomTimes
variable. This will help to decide the rotation count of each plane.

for (ll i=0; i<=N ;i++){
   for(ll j=0;j<=randomTimes;j++){
   	R[i] = Random(1,1e18);
   }
}

*******

**Test File 5.**
N = 100
1 <= STACK[k][i][j] <= 1e9
Rotation count array for each plane. R[1...N]

randomTimes => Random(1,50)
randomTimes its a random integer which will remain same thorughout the test file your task is to crack this randomTimes
variable. This will help to decide the rotation count of each plane.

for (ll i=0; i<=N ;i++){
   for(ll j=0;j<=randomTimes;j++){
   	R[i] = Random(1,1e18);
   }
}
